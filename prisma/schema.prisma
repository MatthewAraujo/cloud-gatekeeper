// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AccessRequest {
  id             String        @id @default(uuid())
  requesterId    String // Slack user ID of the person requesting access
  requesterEmail String // Optional: email for auditing
  username       String // AWS username for the requester
  project        String // e.g. "analytics-prod"
  permissions    Json // AWS permissions array
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  approvedById String? // Slack ID of cloud engineer who approved (if any)
  approvedBy   User?   @relation("Approver", fields: [approvedById], references: [id])

  executedAt DateTime?
  reason     String? // Optional reason for rejection
}

model User {
  id           String  @id // Slack user ID
  email        String
  username     String // AWS username for the user
  isCloudAdmin Boolean @default(false)
  slackId      String  @unique // <-- Add this line

  // Relation
  approvedRequests AccessRequest[] @relation("Approver")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  EXECUTED
}

model Log {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  level     String
  message   String
  meta      Json?
}
